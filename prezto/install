#!/bin/zsh
local input=

if [[ $1 != '-f' && $1 != '--force' ]]; then
	clear
	# Version check
	min_zsh_version='5.0.0'
	if ! autoload -Uz is-at-least || ! is-at-least $min_zsh_version; then
		>&2 print "statusline: old shell detected, minimum supported: $min_zsh_version"
		read -q input \?'Continue anyways? [yn] '
		echo
		[[ $input == n ]] && exit || unset input
		echo
	fi
	unset min_zsh_version
	# Info
	cat <<EOH
This script will install the statusline prezto theme.
It will also install/setup prezto and other requisites as needed.
EOH
	[[ -d ~/.oh-my-zsh/ ]] && print -P '%F{1}%UWarning%u%f: oh-my-zsh will be uninstalled'
	echo
	read -q input\?'Continue? [yn] '
	echo
	[[ $input == n ]] && exit || unset input
	echo
fi

# Uninstall oh-my-zsh
if [[ -d ~/.oh-my-zsh/ ]]; then
	print -P '%B>>> Uninstalling oh-my-zsh%b'
	local +h ZSH=~/.oh-my-zsh/
	source "$ZSH/lib/functions.zsh"
	if (( $+functions[uninstall_oh_my_zsh] )); then
		uninstall_oh_my_zsh
		# If oh-my-zsh switches to bash, it leaves a dirty .zshrc
		if [[ ${SHELL:t} != 'zsh' ]]; then
			print -P '%B>>> Switching back to zsh%b'
			chsh -s /bin/zsh
			if [[ -s ~/.zshrc ]]; then
				print -P '%B%F{1}>>> Renaming .zshrc to .zshrc.omz-backup%f%b'
				echo '(oh-my-zsh uninstall left a dirty .zshrc)'
				mv ~/.zshrc ~/.zshrc.omz-backup
			fi
		fi
	else
		>&2 print 'statusline: could not locate omz uninstall function'
		echo 'Please uninstall oh-my-zsh manually'
		exit
	fi
	unset ZSH
fi

# Setup prezto
if [[ ! -d "${ZDOTDIR:-$HOME}/.zprezto/" ]]; then
	print -P '%B>>> Installing prezto%b'
	git clone --recursive https://github.com/sorin-ionescu/prezto.git "${ZDOTDIR:-$HOME}/.zprezto"
	print -P '%B>>> Setting up zsh config files%b'
	setopt EXTENDED_GLOB
	for rcfile in "${ZDOTDIR:-$HOME}"/.zprezto/runcoms/^README.md(.N); do
		# Append original to prezto version
		local input="${ZDOTDIR:-$HOME}/.${rcfile:t}"
		local output=$rcfile
		if [[ -s $input && -w $output ]]; then
			echo "Appending $input to $output"
			echo "\n#\n# Imported from $input\n#\n" >> $output
			cat $input >> $output
			[[ ! -d "${ZDOTDIR:-$HOME}/backup_runcoms/" ]] && mkdir "${ZDOTDIR:-$HOME}/backup_runcoms/"
			mv $input "${ZDOTDIR:-$HOME}/backup_runcoms/"
		fi
		# Link prezto version to original
		echo "Linking $output to $input"
		ln -s $output $input
	done
fi

cd "${ZDOTDIR:-$HOME}/.zprezto/"
print -P '%B>>> Downloading statusline%b'
git submodule add https://github.com/el1t/statusline.git modules/prompt/external/statusline

# Enter statusline directory
cd modules/prompt/external/statusline
if [[ ! -s ~/Libary/Fonts/MenloforPowerline-Regular.otf ]]; then
	print -P '%B>>> Installing Powerline-patched font (current user only)%b'
	cp setup/MenloforPowerline-Regular.otf ~/Library/Fonts
else
	print -P '%B>>> Font already installed, skipping%b'
fi
print -P '%B>>> Linking into prezto themes directory%b'
ln -fs "$PWD/prezto/prompt_statusline_setup" ../../functions/

# Replace current prezto theme in settings
print -P '%B>>> Adding theme to zpreztorc%b'
sed -i '' $'/zstyle \':prezto:module:prompt\' theme/c\\
zstyle \':prezto:module:prompt\' theme \'statusline\'
' ../../../../runcoms/zpreztorc

# Add git plugin if necessary
if ! grep -q "'git' \\\\" ../../../../runcoms/zpreztorc ; then
	print -P '%B>>> Adding git plugin to zpreztorc%b'
	sed -i '' $'/\'completion\' \\\\/a\\
  \'git\' \\\\
' ../../../../runcoms/zpreztorc
fi

read -q input\?'Use dark theme? (default Solarized Light) [yn] '
echo
if [[ $input == y ]]; then
	input='Dark'
	sed -i '' "s/'statusline'/'statusline' 'dark'/" ../../../../runcoms/zpreztorc
else
	input='Light'
fi
# Open new terminal window with included profile
open "setup/Solarized $input.terminal"
print -P "%B%UPlease set Solarized $input as the default Terminal.app theme!%u%b"
echo "Terminal > Preferences... > Profiles > Solarized $input > Default"
unset input

print -P '%B>>> Statusline has been successfully installed. Please restart zsh to view the theme.%b'