#
# A two-line, responsive theme styled after powerline.
# Originally ported from agnoster, in oh-my-zsh (https://github.com/robbyrussell/oh-my-zsh)
# Async support from sorin's prompt in prezto
#
# Authors:
#   Ellis Tsung (github.com/el1t)
#

#
# ==============Colors==============
# Norm |  Color  | Bold | Solarized
# ----------------------------------
#   0  | Black   |   8  |  Base03
#   1  | Red     |   9  |  Orange
#   2  | Green   |  10  |  Base01
#   3  | Yellow  |  11  |  Base00
#   4  | Blue    |  12  |  Base0
#   5  | Magenta |  13  |  Violet
#   6  | Cyan    |  14  |  Base1
#   7  | White   |  15  |  Base3
#

# Load dependencies
pmodload 'helper'

# Global vars/constants
_prompt_statusline_length=12	# Default number of spaces/symbols in prompt
_prompt_statusline_current_bg=
_prompt_statusline_bg=(7 15)
_prompt_statusline_middle_bg=7
_prompt_statusline_elapsed_time=
_prompt_statusline_git=
typeset -rg _prompt_statusline_separator=''
typeset -rg _prompt_statusline_separator_right=''
typeset -rg _prompt_statusline_separator_light=''
typeset -rg _prompt_statusline_separator_light_right=''

#
# Segment drawing utilities
#

# Draw a segment
function prompt_statusline_draw {
	local -a left right start end center diamond standalone
	zparseopts -D l=left -left=left \
		r=right -right=right \
		s=start -start=start \
		e=end -end=end \
		c=center -center=center \
		d=diamond -diamond=diamond \
		a=standalone -standalond=standalone
	# Begin a left segment
	if [[ -n $left ]]; then
		local bg fg
		[[ -n $1 ]] && bg="%K{$1}" || bg='%k'
		[[ -n $2 ]] && fg="%F{$2}" || fg='%f'
		if [[ -n $_prompt_statusline_current_bg ]]; then
			if [[ $1 != $_prompt_statusline_current_bg ]]; then
				echo -n " $bg%F{$_prompt_statusline_current_bg}$_prompt_statusline_separator "
			else
				echo -n " $bg%F{$_prompt_statusline_bg[2]}$_prompt_statusline_separator_light "
			fi
		else
			echo -n "$bg "
		fi
		_prompt_statusline_current_bg=$1
		echo -n $fg
		[[ -n $3 ]] && echo -n $3
		return
	fi
	# Begin a right segment
	if [[ -n $right ]]; then
		local bg fg
		[[ -n $1 ]] && bg="%K{$1}" || bg='%k'
		[[ -n $2 ]] && fg="%F{$2}" || fg='%f'
		if [[ $1 != $_prompt_statusline_current_bg ]]; then
			echo -n "%F{$_prompt_statusline_current_bg}$bg%S$_prompt_statusline_separator_right%s$fg "
		else
			echo -n "$bg%F{$_prompt_statusline_bg[2]}$_prompt_statusline_separator_light_right$fg "
		fi
		_prompt_statusline_current_bg=$1
		[[ -n $3 ]] && echo -n "$3 "
		return
	fi
	# Start the right prompt, setting the current bg color
	if [[ -n $start ]]; then
		echo -n "${${_prompt_statusline_middle_bg:+%K{$_prompt_statusline_middle_bg}}:-%k}"
		_prompt_statusline_current_bg=$_prompt_statusline_middle_bg
		return
	fi
	# End the left prompt, closing any open segments
	if [[ -n $end ]]; then
		[[ -n $_prompt_statusline_middle_bg ]] && _prompt_statusline_middle_bg="%K{$_prompt_statusline_middle_bg}" || _prompt_statusline_middle_bg='%k'
		if [[ -n $_prompt_statusline_current_bg ]]; then
			echo -n " %F{$_prompt_statusline_current_bg}$_prompt_statusline_middle_bg$_prompt_statusline_separator"
		else
			echo -n $_prompt_statusline_middle_bg
		fi
		echo -n '%f'
		return
	fi
	# Center a prompt
	if [[ -n $center ]]; then
		local length=$(( (COLUMNS - $#3 - 4) / 2 ))
		[[ -n $4 ]] && echo -n "%K{$4}"
		# Pad spaces
		echo -n "${(l:$length:: :)}"
	fi
	#  Sample output 
	if [[ -n $diamond ]]; then
		local padding_color=$4
		[[ -z $4 ]] && padding_color=$_prompt_statusline_bg[2]
		echo -n "%F{$1}%K{$padding_color}$_prompt_statusline_separator_right%F{$2}%K{$1} $3 %F{$1}%K{$padding_color}$_prompt_statusline_separator%f%E%k"
		return
	fi
	if [[ -n $standalone ]]; then
		local bg fg
		[[ -n $1 ]] && bg="%K{$1}" || bg="%K{$_prompt_statusline_bg[1]}"
		[[ -n $2 ]] && fg="%F{$2}" || fg='%f'
		echo -n "$fg$bg $3 %F{$_prompt_statusline_bg[2]}%S$_prompt_statusline_separator%s%f%k "
		return
	fi
}

#
# Prompt components
#

# Status: root/error/background jobs
function prompt_statusline_left_status {
	local symbols='%(#.%F{3}⚡.)'
	(( $1 != 0 )) && symbols+='%F{1}✘'
	[[ -n $(jobs -l) ]] && symbols+='%F{6}⚙'
	symbols="${(%):-$symbols}"

	if [[ -n $symbols ]]; then
		prompt_statusline_draw -l 0 default $symbols
		(( _prompt_statusline_length += $#symbols + 3 ))
	fi
}

# User: username
function prompt_statusline_left_user {
	if [[ -n $SSH_CLIENT || -n $SSH_TTY ]]; then
		prompt_statusline_draw -l 0 3 $LOGNAME
		(( _prompt_statusline_length += $#LOGNAME ))
	fi
}

# Machine: machine name
function prompt_statusline_right_machine {
	if [[ -n $SSH_CLIENT || -n $SSH_TTY ]]; then
		prompt_statusline_draw -r 3 0 '@%m'
	fi
}

# Git: branch, dirty status, commits behind/ahead of remote
function prompt_statusline_left_git {
	# If async has finished
	if (( _prompt_statusline_precmd_async_pid == 0 )); then
		# Declaring this inside the if statement would not be local
		local git_output="${(e)git_info[prompt]}"
		if [[ -n $git_output ]]; then
			prompt_statusline_draw -l $git_info[bg] 7 $git_output
			(( _prompt_statusline_length += $#git_output + 2 ))
		fi
	else
		# Display placeholder for async, gray color
		prompt_statusline_draw -l 14 0 ' ...   '
		# Add extra padding in case statuses are present
		(( _prompt_statusline_length += 8 + 2 + 5))
	fi
}

# Git: format action, output other statuses defined in git_info[rprompt]
function prompt_statusline_right_git {
	# If async has finished
	if (( _prompt_statusline_precmd_async_pid == 0 )); then
		local git_output=$git_info[rprompt]
		if [[ -n $git_output ]]; then
			case $git_info[action] in
				(apply)
					prompt_statusline_draw -r $_prompt_statusline_bg[1] '' '<A<'
					;;
				(bisect)
					prompt_statusline_draw -r $_prompt_statusline_bg[1] '' '<B>'
					;;
				(cherry-pick|cherry-pick-sequence)
					prompt_statusline_draw -r $_prompt_statusline_bg[1] '' '<C<'
					;;
				(merge)
					prompt_statusline_draw -r $_prompt_statusline_bg[1] '' '>M<'
					;;
				(rebase|rebase-interactive|rebase-merge)
					prompt_statusline_draw -r $_prompt_statusline_bg[1] '' '>R>'
					;;
			esac
			prompt_statusline_draw -r $_prompt_statusline_bg[1] '' $git_output
		fi
	fi
}

# Output runtime of previous task
function prompt_statusline_elapsed_time {
	if [[ -n $_prompt_statusline_start_time ]]; then
		local end_time=$(( SECONDS - _prompt_statusline_start_time ))
		if (( end_time >= 10 )); then
			local output
			if (( end_time >= 60 )); then
				if (( end_time >= 3600 )); then
					output="$(( end_time / 3600 ))h "
					end_time=$(( end_time % 3600 ))
				fi
				output=$output"$(( end_time / 60 ))m "
				end_time=$(( end_time % 60 ))
			fi
			output=$output"${end_time}s"
			echo
			print -P "$(prompt_statusline_segment_center 13 7 $output $_prompt_statusline_bg[1])"
		fi
		unset _prompt_statusline_start_time
	fi
}

# Dir: current working directory, shortens if longer than available space
function prompt_statusline_left_dir {
	local directory="${${(%):-%~}}"
	local hashed_directory="${${directory[2,-1]%%/*}:-$directory[1]}"
	prompt_statusline_draw -l 4 7 $hashed_directory
	(( _prompt_statusline_length += $#hashed_directory + 2 ))
	# Replace directory with empty string if at base of hashed directory, else eliminate hashed portion
	directory="${${directory:#^?*/*}:+${directory#?*/}}"
	if [[ -n $directory ]]; then
		local spacing=$(prompt_statusline_left_dir_spacing)
		local length=$#directory
		if (( length < spacing )); then
			prompt_statusline_draw -l 4 7 $directory
		else
			# Shorten path as much as necessary
			local dir_segment
			prompt_statusline_draw -l 4 7
			for dir_segment in ${(@s:/:)directory:h}; do
				if (( length > spacing )); then
					echo -n "$dir_segment[1]/"
					(( length -= $#dir_segment - 1 ))
				else
					echo -n "$dir_segment/"
				fi
			done
			echo -n "${directory:t}"
		fi
	fi
	# ${param:-value} means use param if non-zero length, else value
	# (%) means expand % params
	# ${(C)__string__} capitalizes the first character of each word, zsh style
}

# Spacing: count the spaces available for printing the working directory
function prompt_statusline_left_dir_spacing {
	# Returns exit code 0 if in SSH
	[[ -n $SSH_CLIENT || -n $SSH_TTY ]]
	# Store substituted string of trimmed time, history count, and machine name depending on previous exit code
	local temp="${${(%):-%t%!%(?.⮂ @%m .)}## }"
	# From the total width, subtract spaces, left-side length without working directory, (trimmed) time + space, and history count
	echo $(( COLUMNS - _prompt_statusline_length - $#temp - 1 ))
}

# Draw PS1
function prompt_statusline_left {
	local retval=$?
	_prompt_statusline_current_bg=

	# Pad background for tmux prompt manually, due to lack of %E support
	if [[ -n $TMUX ]]; then
		echo -n "%K{$_prompt_statusline_bg[1]}${(l:$COLUMNS:: :)}%k%{$(echotc LEFT $COLUMNS)%}"
	fi

	prompt_statusline_left_status $retval
	prompt_statusline_left_user
	[[ -n $_prompt_statusline_git ]] && prompt_statusline_left_git
	prompt_statusline_left_dir
	prompt_statusline_draw -e

	# Clear to EOL if not in tmux
	[[ -z $TMUX ]] && echo -n '%E'
}

# Draw RPS1
function prompt_statusline_right {
	prompt_statusline_draw -s
	[[ -n $_prompt_statusline_git ]] && prompt_statusline_right_git
	# print time, trimming leading spaces
	prompt_statusline_draw -r 5 7 "${${(%):-%t}## }"
	# print history number
	prompt_statusline_draw -r $_prompt_statusline_bg[1] '' '!%F{4}%!'
	prompt_statusline_right_machine
}

# Draw PS1 single-line
function prompt_statusline_left_single {
	local retval=$?
	_prompt_statusline_current_bg=
	prompt_statusline_left_status $retval
	prompt_statusline_left_user
	[[ -n $_prompt_statusline_git ]] && prompt_statusline_left_git
	prompt_statusline_left_dir
	prompt_statusline_draw -e
}

function prompt_statusline_right_single {
	prompt_statusline_draw -s
	[[ -n $_prompt_statusline_git ]] && prompt_statusline_right_git
	prompt_statusline_right_machine
}

#
# Prezto setup functions
#

function prompt_statusline_precmd_async {
	# Get Git repository information.
	if (( $+functions[git-info] )); then
		git-info
		typeset -p git_info >! $_prompt_statusline_precmd_async_data
	fi

	# Signal completion to parent process.
	kill -WINCH $$
}

function prompt_statusline_git_info {
	# Append Git status.
	if (( _prompt_statusline_precmd_async_pid > 0 )); then
		alias typeset='typeset -g'
		source $_prompt_statusline_precmd_async_data
		unalias typeset
		# Reset PID.
		_prompt_statusline_precmd_async_pid=0

		# Display prompt.
		zle && zle reset-prompt
	fi
}

function prompt_statusline_precmd {
	setopt LOCAL_OPTIONS
	unsetopt XTRACE KSH_ARRAYS

	# Check previous task runtime
	prompt_statusline_elapsed_time

	# Kill the old process of slow commands if it is still running.
	if (( _prompt_statusline_precmd_async_pid > 0 )); then
		kill -KILL $_prompt_statusline_precmd_async_pid &>/dev/null
	fi

	# Split off async task to check git status if in git repo
	if $(git rev-parse --is-inside-work-tree 2> /dev/null); then
		_prompt_statusline_git=1
		# Compute slow commands in the background.
		trap prompt_statusline_git_info WINCH
		prompt_statusline_precmd_async &!
		_prompt_statusline_precmd_async_pid=$!
	else
		unset _prompt_statusline_git
	fi
}

function prompt_statusline_preexec {
	_prompt_statusline_start_time=$SECONDS
}

function prompt_statusline_help {
	print -P \
"This prompt supports solarized light and dark. You can invoke it thus:

	prompt statusline [<color1>] [<color2>]

Set this theme with:
	zstyle ':prezto:module:prompt' theme 'statusline' ['<color1>'] ['<color2>']

where the color1 is %Blight%b or %Bdark%b, and color2 is the statusbar background color.
Solarized light with a white statusbar is the default style."
}

function prompt_statusline_preview {
	# Prevent changes from affecting default prompt
	local +h PROMPT=''
	local +h RPROMPT=''
	local +h PS2=''
	local +h RPS2=''
	local +h PS3=''
	local +h PS4=''
	local +h SPROMPT=''

	editor-info 2> /dev/null

	if (( # > 0 )); then
		prompt_preview_theme statusline "$@"
	else
		prompt_preview_theme statusline light
		print "$FX[none]"
		prompt_preview_theme statusline dark
	fi
}

# %s = undo standout, %u = remove underline, %b = unbold, %f = default foreground, %k = default background
# %S = standout, %U = underline, %B = bold, %F = fg (text) color, %K = bg color, %E = clear to end of line
function prompt_statusline_setup {
	setopt LOCAL_OPTIONS
	unsetopt XTRACE KSH_ARRAYS
	prompt_opts=(cr percent subst)
	_prompt_statusline_precmd_async_pid=0
	_prompt_statusline_precmd_async_data="${TMPPREFIX}-prompt_statusline_data"

	# Load required functions
	autoload -Uz add-zsh-hook

	# Add hooks
	add-zsh-hook preexec prompt_statusline_preexec
	add-zsh-hook precmd prompt_statusline_precmd

	# Completion styling
	zstyle ':completion:*:corrections' format "$(prompt_statusline_draw -a 2 7 '%d (errors: %e)')"
	zstyle ':completion:*:descriptions' format "$(prompt_statusline_draw -a 3 7 '%d')"
	zstyle ':completion:*:messages' format ' %F{13} -- %d --%f'
	zstyle ':completion:*:warnings' format "$(prompt_statusline_draw -c -d 1 $_prompt_statusline_bg[1] 'No matches found')"
	zstyle ':completion:*:default' list-prompt '%S%M matches%s'
	zstyle ':completion:*' format "$(prompt_statusline_draw -a 3 7 '%d')"

	# Editor styling
	zstyle ':prezto:module:editor:info:completing' format '%B%F{1}...%f%b'
	zstyle ':prezto:module:editor:info:keymap:primary' format \
		"%F{4}%K{$_prompt_statusline_bg[1]}❯%K{$_prompt_statusline_bg[2]}%F{$_prompt_statusline_bg[1]}%f%k"
	zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format ' %F{1}♺%f'
	zstyle ':prezto:module:editor:info:keymap:alternate' format \
		"%F{9}%K{$_prompt_statusline_bg[1]}❯%K{$_prompt_statusline_bg[2]}%F{$_prompt_statusline_bg[1]}%f%k"

	# Git-info styling
	zstyle ':prezto:module:git:info' verbose 'yes'
	zstyle ':prezto:module:git:info:action' format '%s'
	zstyle ':prezto:module:git:info:added' format '%F{2}✚%f'
	zstyle ':prezto:module:git:info:ahead' format '%F{3}↑%A%f'
	zstyle ':prezto:module:git:info:behind' format '%F{3}↓%B%f'
	zstyle ':prezto:module:git:info:branch' format ' %b'
	zstyle ':prezto:module:git:info:commit' format '%.7c'
	zstyle ':prezto:module:git:info:deleted' format '%F{1}✖%f'
	zstyle ':prezto:module:git:info:modified' format '3'
	zstyle ':prezto:module:git:info:position' format ':%p'
	zstyle ':prezto:module:git:info:renamed' format '%F{9}➜%f'
	zstyle ':prezto:module:git:info:stashed' format '%F{6}§%f'
	zstyle ':prezto:module:git:info:unmerged' format '%F{3}₥%f'
	zstyle ':prezto:module:git:info:untracked' format '1'
	zstyle ':prezto:module:git:info:keys' format \
		'prompt' '$(coalesce "%b" "%p" "%c")%s' \
		'rprompt' '%A%B%S%a%d%r%U' \
		'bg' '$(coalesce "%u" "%m" "2")' \
		'untracked' '%u'

	# Customize theme
	if [[ $1 == 'dark' ]]; then
		_prompt_statusline_bg=(0 8)
		_prompt_statusline_middle_bg=0
	fi
	[[ -n $2 ]] && _prompt_statusline_middle_bg=$2

	# Set primary prompt
	if [[ $3 == 'single' ]]; then
		_prompt_statusline_middle_bg=$_prompt_statusline_bg[2]
		PROMPT="%{$(print $FX[none])%}"'
$(prompt_statusline_left_single)'"%{$(print $FX[none])%}"
		RPROMPT="%{$terminfo[cuf1]%}"'$(prompt_statusline_right_single)'"%{$(print $FX[none])$terminfo[cuf1]%}"
	else
		PROMPT="%{$(print $FX[none])%}"'
$(prompt_statusline_left)
$editor_info[keymap]'
		RPROMPT='%{$terminfo[cuu1]$terminfo[cuf1]%}$(prompt_statusline_right)%{$(echotc DO 1)%}'
	fi

	# Secondary prompt, printed when the shell needs more information to complete a command
	PS2="%F{6}%K{$_prompt_statusline_bg[1]}❯%k%F{$_prompt_statusline_bg[1]}$_prompt_statusline_separator%f"
	RPS2="%k%F{$_prompt_statusline_bg[1]}$_prompt_statusline_separator_right%F{6}%K{$_prompt_statusline_bg[1]} %_%E"

	# Selection prompt used within a select loop
	PS3="$(prompt_statusline_draw -a 7 13 'Select:')"

	# Execution trace prompt
	# setopt xtrace # disable with unsetopt xtrace
	PS4="$(prompt_statusline_draw -a '' 2 '%N%f:%F{4}%i')"

	# Spelling prompt used to correct spelling errors
	SPROMPT="$(prompt_statusline_draw -a 9 7 'Correction:')change %B%F{1}%R%b%f to %B%F{2}%r%b%f [%Unyae%u]? "
}

prompt_statusline_setup "$@"
# vim: set ft=sh